# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GenerateWebMapWithWmts
                                 A QGIS plugin
 Generate web map in Arc GIS Online containing tile services from planet
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-11-23
        git sha              : $Format:%H$
        copyright            : (C) 2020 by line
        email                : rweber@osmre.gov
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .agol_qgis_plugin_dialog import GenerateWebMapWithWmtsDialog
import os.path
import os, sys
from arcgis.gis import GIS
from datetime import date
import datetime
from arcgis.mapping import WebMap
import requests
import xmltodict
from qgis.core import *


class GenerateWebMapWithWmts:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GenerateWebMapWithWmts_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Generate AGOL Web Map')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GenerateWebMapWithWmts', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/agol_qgis_plugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Generate ArcGIS Online Web Map'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(
                self.tr(u'&Generate AGOL Web Map'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GenerateWebMapWithWmtsDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            self.dlg.leUser
        
            project = QgsProject.instance()

            current_utc = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

            # set web map title 
            wmtitle = self.dlg.webmapname.text()
            snippet = self.dlg.snippet.text()

            #connect to a portal
            print('Connecting....')
            gis = GIS(username=self.dlg.leUser.text(), password=self.dlg.lePass.text(), verify_cert=False)
            user = gis.users.me.username

            # empty array for operationalyers to updated in the web map
            operationallayers = []

            existingwm = gis.content.search(query=wmtitle, item_type= 'Web Map')

            def keepnonWMTSlayers(existingwebmap):
                
                opl = existingwebmap.layers
                for o in opl:
                    try:
                        print(f'Keeping {o.url} as Operational layers')
                        operationallayers.append(dict(o))
                    except:
                        print('Existing Planet layers will be updated')


            # createOpLayer creates the json dictionary for each planet layer that is the saved .aprx first map if the layers source 
            # are not Planet tiled sourced WMTS layers they will passed over
            def createOpLayer():
                global extentlower, extentmax
                
                layers = QgsProject.instance().mapLayers().values()
                for l in layers:
                    split = l.source().split('url')
                    templateurl = split[1][1:]
                    if templateurl.startswith('https://tiles'):
                
                        print(f'''Planet WMTS {templateurl} will be added to the Web Map as Operational Layer''')
            #                         token = gis._con.token
            #             s = requests.Session()
                        
                        halfurl = templateurl.split('layers/')
                        splitupurl = halfurl[1].split('/')
                        itemid = splitupurl[0]
                        apiurl = templateurl.split('api_key=')
                        api_key = apiurl[1]
                        
                        wmtsurl = f'https://tiles.planet.com/data/v1/layers/wmts/{itemid}?api_key={api_key}'
            #             proxies = {
            # #                           'http': 'http://10.10.1.10:3128',
            #                 'https': 'localhost:8899',
            #             }
                        response = requests.get(wmtsurl)
                        
                        xmlparsed = xmltodict.parse(response.text)
                        
                        # templateUrl = xmlparsed['Capabilities']['Contents']['Layer']['ResourceURL']['@template']

                        extentlower = xmlparsed['Capabilities']['Contents']['Layer']['ows:WGS84BoundingBox']['ows:LowerCorner']

                        extentmax = xmlparsed['Capabilities']['Contents']['Layer']['ows:WGS84BoundingBox']['ows:UpperCorner']

                        xyminmax = xmlparsed['Capabilities']['Contents']['TileMatrixSet']['TileMatrix'][0]['TopLeftCorner']
                        extent = xyminmax.split(' ')[1]

                        oplayerjson = {"templateUrl":f'{templateurl}{api_key}',
                                                "copyright":"Planet",
                                                "fullExtent":{"xmin":-20037508.342787,"ymin":-20037508.342787,"xmax":20037508.342787,"ymax":20037508.342787,
                                                "spatialReference":{"wkid":102100}},
                                                "id":"WebTiled_54",
                                                "title":f"{l.name()}",
                                                "type":"WebTiledLayer",
                                                "layerType":"WebTiledLayer",
                                                "tileInfo": {},
                                                "wmtsInfo": {"url": f'''{wmtsurl}''',"layerIdentifier": "Combined scene layer","tileMatrixSet": "GoogleMapsCompatible23"},
                                                "visibility":True,"opacity":1, "minScale": 700000,"maxScale": 1500}
                        operationallayers.append(oplayerjson)
                    #         else:
                    #             print(f'Cant Get {glayer} data source url /n Make sure you only have 1 group level /non top of the actual wmts')
                    # else:
                    #     print('Layer is not a planet WMTS or a higher level group layer with no data source')

            #createOpLayer function            
            createOpLayer()

            # set the data parameter for the item properties dictionary of the new web map item
            data={"operationalLayers":operationallayers,
                                        "baseMap":{"baseMapLayers":[{"id":"defaultBasemap",
                                        "layerType":"ArcGISTiledMapServiceLayer","url":"https://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer",
                                        "visibility":True,"opacity":1,"title":"Topographic"}],"title":"Topographic"},"spatialReference":{"wkid":102100,"latestWkid":3857},"authoringApp":"WebMapViewer","authoringAppVersion":"4.7","version":"2.8"}

            # Fill this out as you see fit, the key part is the "text" attribute
            item_properties_dict = {"type": "Web Map","title": wmtitle, 
                                    "description": f"Updated: {current_utc}", 
                                    "tags": ["WebTiledLaye","pythonapi"],
                                    "snippet":snippet, "text":data}

            # format the extent string so it can be used to set the initial extent of the web map
            lowerext = [str(extentlower).replace(' ',', ')]
            upperext = [str(extentmax).replace(' ', ', ')]
            wmextent = [lowerext, upperext]
            cleanextent = str(wmextent).replace("'", "")
            existingwm = gis.content.search(wmtitle)
            if existingwm:
                webmap = WebMap(existingwm[0])
                keepnonWMTSlayers(webmap)
                print(len(operationallayers))
            #     print(f
                # Update the extent
                item = gis.content.get(existingwm[0].id)
                print(f'''Update Operational Layers: {item.update(item_properties=item_properties_dict)}''')
                print(f'''Set Web Map Extent to WMTS Layer: {item.update(item_properties={'extent':cleanextent})}''')

            else:
                newmap = gis.content.add(item_properties = item_properties_dict)
                print(f'created new web map: {newmap}')
                wm = WebMap(newmap)
                # featurecollection = gis.content.get('')
                # permits = featurecollection.layers[10]
                # print(f'''Added OSMRE Permit Boundary Layer: {wm.add_layer(permits)}''')
                wm.update()
                # Update the extent
                item = gis.content.get(newmap.id)
                print(f'''Set Web Map Extent to WMTS Layer: {item.update(item_properties={'extent':cleanextent})}''')
